import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import xyz.jpenilla.runtask.task.AbstractRun

plugins {
    kotlin("jvm") version "${KOTLIN_VERSION}"
    id("com.gradleup.shadow") version "8.3.0"
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = "${BUILD_COORDS.groupId}"
version = "${BUILD_COORDS.version}"

repositories {
    mavenCentral()
#if ($IS_SPIGOT)
    maven("https://hub.spigotmc.org/nexus/content/repositories/snapshots/") {
        name = "spigotmc-repo"
    }
#elseif ($IS_PAPER)
    maven("https://repo.papermc.io/repository/maven-public/") {
        name = "papermc-repo"
    }
#end
    maven("https://oss.sonatype.org/content/groups/public/") {
        name = "sonatype"
    }
    maven("http://repo.system32dev.site/repository/maven-releases/"){
        isAllowInsecureProtocol = true
    }
}

dependencies {
#if ($IS_SPIGOT)
    compileOnly("org.spigotmc:spigot-api:${MC_VERSION}-R0.1-SNAPSHOT")
#elseif ($IS_PAPER)
    compileOnly("io.papermc.paper:paper-api:${MC_VERSION}-R0.1-SNAPSHOT")
#end
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("com.system32:SystemCore:1.9.8")
}

tasks {
  runServer {
    minecraftVersion("${API_VERSION}")
    downloadPlugins {
            hangar("SkinsRestorer", "15.7.3")
        }
  }
}

val targetJavaVersion = ${JAVA_VERSION}
kotlin {
    jvmToolchain(targetJavaVersion)
}

tasks.build {
    dependsOn("shadowJar")
}

tasks.withType<KotlinJvmCompile> {
    compilerOptions {
        javaParameters = true
    }
}

#if ($USE_PAPER_MANIFEST)
    #set($MANIFEST_NAME = "paper-plugin.yml")
#else
    #set($MANIFEST_NAME = "plugin.yml")
#end
tasks.processResources {
    val props = mapOf("version" to version)
    inputs.properties(props)
    filteringCharset = "UTF-8"
    filesMatching("${MANIFEST_NAME}") {
        expand(props)
    }
}

tasks.withType(AbstractRun::class) {
    systemProperty("net.kyori.adventure.text.warnWhenLegacyFormattingDetected", false)
}